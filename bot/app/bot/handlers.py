from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, filters, CommandHandler, MessageHandler, CallbackQueryHandler
from app.knowledge_base.faq import FAQ
from app.database.operations import DatabaseManager
from app.bot.keyboards import Keyboards
from app.bot.middlewares import log_handler, rate_limit
from app.ai.ocr import AddressChecker
import logging
from pathlib import Path
from app.ai.chat import ChatManager
import config

logger = logging.getLogger(__name__)

class BotHandlers:
    def __init__(self, chat_manager: ChatManager, db_manager: DatabaseManager):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–æ—Ç–∞"""
        self.chat_manager = chat_manager
        self.db_manager = db_manager
        self.faq = FAQ()
        self.keyboards = Keyboards()
        self.address_checker = AddressChecker()
        self.code_context = {}  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤–≤–æ–¥–∞ –∫–æ–¥–∞

    @log_handler
    async def start_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
        """
        –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start. –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
        """
        user = update.effective_user
        is_subscribed = self.db_manager.check_subscription(user.id)
        
        welcome_text = (
            "üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –ø–æ–º–æ—â–Ω–∏–∫ Silkway cargo.\n\n"
            "–Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å:\n"
            "‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞\n"
            "‚Ä¢ –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º –¥–æ—Å—Ç–∞–≤–∫–∏\n"
            "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–æ–π –∞–¥—Ä–µ—Å–∞ —Å–∫–ª–∞–¥–∞\n"
            "‚Ä¢ –í–æ–ø—Ä–æ—Å–∞–º–∏ –ø–æ –≤–æ–∑–≤—Ä–∞—Ç—É\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ –≤ —á–∞—Ç:"
        )
        
        await update.message.reply_text(
            welcome_text,
            reply_markup=self.keyboards.main_menu(is_subscribed)
        )
        return True

    @log_handler
    async def callback_query_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç inline –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()
        
        if query.data == 'subscribe':
            user = update.effective_user
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            if self.db_manager.check_subscription(user.id):
                await query.message.edit_text(
                    "‚úÖ –í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É!\n\n"
                    "–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –Ω–∞–∂–º–∏—Ç–µ /start",
                    reply_markup=self.keyboards.main_menu(is_subscribed=True)
                )
                return True
                
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω - –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º
            if self.db_manager.add_subscriber(user.id, user.username):
                await query.message.edit_text(
                    "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É!\n\n"
                    "–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –≤–∞–∂–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:\n"
                    "‚Ä¢ –û –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤\n"
                    "‚Ä¢ –û–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ —Ä–∞–±–æ—Ç–µ —Å–∫–ª–∞–¥–æ–≤\n"
                    "‚Ä¢ –û —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∞–∫—Ü–∏—è—Ö\n\n"
                    "–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –Ω–∞–∂–º–∏—Ç–µ /start",
                    reply_markup=self.keyboards.main_menu(is_subscribed=True)
                )
            else:
                await query.message.edit_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ.\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É.",
                    reply_markup=self.keyboards.operator_redirect()
                )
            return True
        
        elif query.data == 'unsubscribe':
            user = update.effective_user
            if self.db_manager.unsubscribe(user.id):
                await query.message.edit_text(
                    "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏.\n\n"
                    "–í—ã –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.\n"
                    "–ß—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞, –Ω–∞–∂–º–∏—Ç–µ /start",
                    reply_markup=self.keyboards.main_menu(is_subscribed=False)
                )
            else:
                await query.message.edit_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ.\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É.",
                    reply_markup=self.keyboards.operator_redirect()
                )
            return True
        
        responses = {
            'track': (
                "üì¶ –ß—Ç–æ–±—ã –æ—Ç—Å–ª–µ–¥–∏—Ç—å –∑–∞–∫–∞–∑:\n\n"
                "1. –û—Ç–∫—Ä–æ–π—Ç–µ –º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n"
                "2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª ¬´–ó–∞–∫–∞–∑—ã¬ª\n"
                "3. –í—ã–±–µ—Ä–∏—Ç–µ ¬´–ü—Ä–∏–±—ã–ª –≤ –ø—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏¬ª"
            ),
            'delivery': (
                "üöö –î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–æ –¥–≤–µ—Ä–∏:\n\n"
                "1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª ¬´–ó–∞–∫–∞–∑—ã¬ª\n"
                "2. –í—ã–±–µ—Ä–∏—Ç–µ ¬´–ü—Ä–∏–±—ã–ª –≤ –ø—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏¬ª\n"
                "3. –ü–æ—Å—Ç–∞–≤—å—Ç–µ –≥–∞–ª–æ—á–∫—É ¬´–¥–æ—Å—Ç–∞–≤–∫–∞ –¥–æ –¥–≤–µ—Ä–∏¬ª\n"
                "4. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–¥—Ä–µ—Å –∏ –æ–ø–ª–∞—Ç–∏—Ç–µ"
            ),
            'check_address': (
                "‚úÖ –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥—Ä–µ—Å–∞ —Å–∫–ª–∞–¥–∞ –º–Ω–µ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è:\n\n"
                "1Ô∏è‚É£ –í–∞—à –∫–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞ (6 —Ü–∏—Ñ—Ä)\n"
                "2Ô∏è‚É£ –°–∫—Ä–∏–Ω—à–æ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –∞–¥—Ä–µ—Å–æ–º\n\n"
                "–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥ –∫–æ–º–∞–Ω–¥–æ–π: `/code –≤–∞—à_–∫–æ–¥`\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: `/code 929848`\n\n"
                "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç, –∏ —è –ø—Ä–æ–≤–µ—Ä—é –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∞–¥—Ä–µ—Å–∞."
            ),
            'refund': (
                "‚Ü©Ô∏è –í–∞—Ä–∏–∞–Ω—Ç—ã –≤–æ–∑–≤—Ä–∞—Ç–∞:\n\n"
                "1. –ü—Ä–∏ –±—Ä–∞–∫–µ —Ç–æ–≤–∞—Ä–∞\n"
                "2. –ü—Ä–∏ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—é\n"
                "3. –ü—Ä–∏ –Ω–µ–≤–µ—Ä–Ω–æ–º —Ä–∞–∑–º–µ—Ä–µ/—Ü–≤–µ—Ç–µ\n"
                "4. –ü—Ä–∏ –Ω–µ–¥–æ—Å—Ç–∞—á–µ\n\n"
            ),
            'faq': (
                "‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã:\n\n"
                "1. –ö–∞–∫ –æ—Ç—Å–ª–µ–¥–∏—Ç—å –∑–∞–∫–∞–∑?\n"
                "2. –ö–∞–∫ –∑–∞–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É?\n"
                "3. –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã —Å–∫–ª–∞–¥–∞\n"
                "4. –ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å –≤–æ–∑–≤—Ä–∞—Ç?\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ –≤ —á–∞—Ç"
            ),
            'start_check': (
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à –∫–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π `/code –≤–∞—à_–∫–æ–¥`\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: `/code 929848`"
            ),
            'main_menu': (
                "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≤–æ–ø—Ä–æ—Å:"
            )
        }
        
        response = responses.get(query.data)
        if response:
            keyboard = None
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –¥–ª—è –≤—Å–µ—Ö –æ—Ç–≤–µ—Ç–æ–≤, –∫—Ä–æ–º–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥—Ä–µ—Å–∞
            if query.data not in ['check_address', 'main_menu']:
                keyboard = InlineKeyboardMarkup([
                    [InlineKeyboardButton("¬´ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]
                ])
            elif query.data == 'main_menu':
                keyboard = self.keyboards.main_menu()
            elif query.data == 'check_address':
                keyboard = InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚úÖ –î–∞, –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–¥—Ä–µ—Å", callback_data='start_check')
                ]])

            # –í–∫–ª—é—á–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É Markdown –¥–ª—è –∫–æ–¥–∞
            await query.edit_message_text(
                text=response,
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç –≥–æ—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ FAQ
            faq_response = self.faq.get_response(query.data)
            if faq_response:
                keyboard = InlineKeyboardMarkup([
                    [InlineKeyboardButton("¬´ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]
                ])
                await query.edit_message_text(
                    text=faq_response,
                    reply_markup=keyboard
                )
            else:
                await query.edit_message_text(
                    "–ò–∑–≤–∏–Ω–∏—Ç–µ, –¥–∞–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.",
                    reply_markup=self.keyboards.operator_redirect()
                )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ
        self.db_manager.save_interaction(
            user_id=update.effective_user.id,
            message=f"[CALLBACK] {query.data}",
            response=response or faq_response or "–†–∞–∑–¥–µ–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
            message_type="callback",
            success=bool(response or faq_response)
        )

    @log_handler
    async def code_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
        """
        –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /code –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –∫–æ–¥–∞
        """
        user_id = update.effective_user.id
        message = update.message.text

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π /code
        if message.startswith('/code'):
            try:
                code = context.args[0] if context.args else None
            except IndexError:
                code = None
        else:
            # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–æ–º–∞–Ω–¥–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ —Å–∞–º–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
            code = message.strip() if message.strip().isdigit() else None
            if not self.code_context.get(user_id):
                # –ï—Å–ª–∏ –Ω–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤–≤–æ–¥–∞ –∫–æ–¥–∞, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
                return False

        if not code:
            await update.message.reply_text(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ–¥ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.\n"
                "–ü—Ä–∏–º–µ—Ä: `/code 929848`",
                parse_mode='Markdown'
            )
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–¥–∞
            self.code_context[user_id] = True
            return True

        if not code.isdigit() or len(code) != 6:
            await update.message.reply_text(
                "‚ùå –ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 6 —Ü–∏—Ñ—Ä.\n"
                "–ü—Ä–∏–º–µ—Ä: `/code 929848`",
                parse_mode='Markdown'
            )
            return True

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥
        context.user_data['client_code'] = code
        # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–¥–∞
        self.code_context.pop(user_id, None)
        
        await update.message.reply_text(
            f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –í–∞—à –∫–æ–¥ {code} —Å–æ—Ö—Ä–∞–Ω–µ–Ω.\n\n"
            "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –∞–¥—Ä–µ—Å–æ–º, –∏ —è –ø—Ä–æ–≤–µ—Ä—é –µ–≥–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å.\n"
            "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ –≤–∏–¥–Ω—ã –≤—Å–µ –¥–µ—Ç–∞–ª–∏ –∞–¥—Ä–µ—Å–∞."
        )
        return True

    @log_handler
    async def handle_photo(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π (–ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥—Ä–µ—Å–∞)"""
        client_code = context.user_data.get('client_code')
        
        if not client_code:
            instructions = (
                "‚ùå –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥—Ä–µ—Å–∞ –º–Ω–µ –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å –≤–∞—à –∫–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞.\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥ –∫–æ–º–∞–Ω–¥–æ–π:\n"
                "`/code –≤–∞—à_–∫–æ–¥`\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: `/code 929848`\n\n"
                "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –µ—â–µ —Ä–∞–∑."
            )
            await update.message.reply_text(
                instructions,
                parse_mode='Markdown'
            )
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–¥–∞
            self.code_context[update.effective_user.id] = True
            return True
        
        await update.message.reply_text("üîç –ü—Ä–æ–≤–µ—Ä—è—é –∞–¥—Ä–µ—Å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
        
        photo = update.message.photo[-1]
        photo_file = await photo.get_file()
        
        temp_dir = Path("temp")
        temp_dir.mkdir(exist_ok=True)
        photo_path = temp_dir / f"{photo.file_id}.jpg"
        
        try:
            await photo_file.download_to_drive(photo_path)
            is_valid, message = await self.address_checker.check_image(str(photo_path), client_code)
            
            if is_valid:
                await update.message.reply_text(
                    message,
                    reply_markup=self.keyboards.address_check_menu()
                )
            else:
                await update.message.reply_text(
                    message,
                    reply_markup=self.keyboards.operator_redirect()
                )

            # –õ–æ–≥–∏—Ä—É–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ
            self.db_manager.save_interaction(
                user_id=update.effective_user.id,
                message="[PHOTO]",
                response=message,
                message_type="photo",
                success=is_valid
            )
        
        except Exception as e:
            logger.error(f"Error processing photo: {e}")
            await update.message.reply_text(
                "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–¥—Ä–µ—Å–∞. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ—Ç–∫–∏–π –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, "
                "–∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É –∑–∞ –ø–æ–º–æ—â—å—é.",
                reply_markup=self.keyboards.operator_redirect()
            )
        finally:
            if photo_path.exists():
                photo_path.unlink()

        return True

    @log_handler
    @rate_limit(5, 60) 
    async def message_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        """
        user_id = update.effective_user.id
        message = update.message.text

        # –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–µ–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤–≤–æ–¥–∞ –∫–æ–¥–∞ –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –∫–æ–¥
        if self.code_context.get(user_id) and message.strip().isdigit():
            return await self.code_handler(update, context)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        self.db_manager.update_last_activity(user_id)
        
        try:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —á–∞—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä
            response, needs_operator = self.chat_manager.process_message(user_id, message)
            
            if needs_operator:
                try:
                    # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º
                    self.db_manager.create_operator_session(user_id, message)
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    await update.message.reply_text(
                        "üîÑ –ü–µ—Ä–µ–≤–æ–∂—É –≤–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞...\n"
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ. –û–ø–µ—Ä–∞—Ç–æ—Ä —Å–∫–æ—Ä–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—Å—è –∫ –¥–∏–∞–ª–æ–≥—É.",
                        reply_markup=self.keyboards.operator_redirect()
                    )
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ
                    self.db_manager.save_interaction(
                        user_id=user_id,
                        message=message,
                        response="[REDIRECTED TO OPERATOR]",
                        message_type="operator_redirect",
                        success=True
                    )
                except Exception as e:
                    logger.error(f"Error handling operator redirect: {e}")
                    await update.message.reply_text(
                        "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞. "
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                    )
            else:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–µ–Ω—é
                reply_markup = (
                    self.keyboards.main_menu() 
                    if "–ø–æ–º–æ—â—å" in message.lower() or "–º–µ–Ω—é" in message.lower()
                    else None
                )
                
                await update.message.reply_text(
                    response,
                    reply_markup=reply_markup
                )
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—Å–ø–µ—à–Ω–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ
                self.db_manager.save_interaction(
                    user_id=user_id,
                    message=message,
                    response=response,
                    message_type="ai",
                    success=True
                )
                
        except Exception as e:
            logger.error(f"Error in message_handler: {e}")
            await update.message.reply_text(
                "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É.",
                reply_markup=self.keyboards.operator_redirect()
            )
            
        return True

    def register_handlers(self, application):
        """
        –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –±–æ—Ç–∞
        """
        # –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
        application.add_handler(CommandHandler("start", self.start_handler))
        application.add_handler(CommandHandler("code", self.code_handler)) 
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
        application.add_handler(MessageHandler(filters.PHOTO, self.handle_photo))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ (–∫–Ω–æ–ø–∫–∏)
        application.add_handler(CallbackQueryHandler(self.callback_query_handler))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º)
        application.add_handler(MessageHandler(
            filters.TEXT & ~filters.COMMAND,
            self.message_handler
        ))

    async def start_cmd(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        is_subscribed = self.db_manager.check_subscription(user.id)
        
        await update.message.reply_text(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç!\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≤–æ–ø—Ä–æ—Å:",
            reply_markup=self.keyboards.main_menu(is_subscribed)
        )