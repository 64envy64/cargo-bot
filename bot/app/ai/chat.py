from .model import SilkwayAI
from typing import Dict, List, Optional, Tuple
import logging
from app.database.operations import DatabaseManager
from app.knowledge_base.faq import FAQ

logger = logging.getLogger(__name__)

class ChatManager:
    def __init__(self, db_manager: DatabaseManager):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —á–∞—Ç–∞"""
        self.model = SilkwayAI()
        self.conversations: Dict[int, List[Dict]] = {}
        self.db_manager = db_manager
        self.faq = FAQ()
        
    def add_message(self, user_id: int, message: str, role: str = "user"):
        if user_id not in self.conversations:
            self.conversations[user_id] = []
            
        self.conversations[user_id].append({
            "role": role,
            "content": message
        })
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 10 —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        self.conversations[user_id] = self.conversations[user_id][-10:]

    def get_conversation_context(self, user_id: int) -> str:
        if user_id not in self.conversations:
            return ""
            
        context = "\n".join([
            f"{'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å' if msg['role'] == 'user' else '–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç'}: {msg['content']}"
            for msg in self.conversations[user_id][-3:]  # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å–æ–æ–±—â–µ–Ω–∏—è
        ])
        
        return context

    def get_conversation_history(self, user_id: int, limit: int = 5) -> str:
        if user_id not in self.conversations:
            return "–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
            
        history = []
        for msg in self.conversations[user_id][-limit:]:
            role = "üë§ –ö–ª–∏–µ–Ω—Ç" if msg['role'] == 'user' else "ü§ñ –ë–æ—Ç"
            history.append(f"{role}: {msg['content']}")
            
        return "\n\n".join(history)

    def process_message(self, user_id: int, message: str) -> Tuple[str, bool]:
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.add_message(user_id, message)
            
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º FAQ
            faq_response = self.faq.get_response(message)
            if faq_response:
                self.add_message(user_id, faq_response, role="assistant")
                return faq_response, False

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ –≤–æ–ø—Ä–æ—Å –∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–º —Ç–µ–º–∞–º
            if not self.model.is_allowed_question(message):
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç –æ –ø–µ—Ä–µ–≤–æ–¥–µ –Ω–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
                return (
                    "üîÑ –ü–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞. –Ø –ø–µ—Ä–µ–≤–æ–∂—É –≤–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞...\n\n"
                    "–û–ø–µ—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–∏—Ç –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
                    True
                )

            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            context = self.get_conversation_context(user_id)
            response = self.model.generate_response(f"{context}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message}")
            
            # –ï—Å–ª–∏ –º–æ–¥–µ–ª—å –Ω–µ —Å–º–æ–≥–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–Ω—è—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç
            if not response or response.strip() == "":
                return (
                    "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å. "
                    "–î–∞–≤–∞–π—Ç–µ —è –ø–µ—Ä–µ–≤–µ–¥—É –≤–∞—Å –Ω–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏.",
                    True
                )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.add_message(user_id, response, role="assistant")
            
            return response, False

        except Exception as e:
            logger.error(f"Error processing message: {e}")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–µ—Ä–µ–≤–æ–∂—É –Ω–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞...", True

    def clear_conversation(self, user_id: int):
        if user_id in self.conversations:
            del self.conversations[user_id]