import asyncio
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from app.database.operations import DatabaseManager
from app.config import AUTHORIZED_OPERATORS

logger = logging.getLogger(__name__)

class AdminBotHandlers:
    def __init__(self, db_manager: DatabaseManager):
        self.db_manager = db_manager

    async def start_cmd(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if update.effective_user.id not in AUTHORIZED_OPERATORS:
            await update.message.reply_text(
                "‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏."
            )
            return

        keyboard = [
            [
                InlineKeyboardButton("üì® –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏", callback_data='new_requests'),
                InlineKeyboardButton("‚úÖ –û—Ç–≤–µ—á–µ–Ω–Ω—ã–µ", callback_data='answered')
            ],
            [
                InlineKeyboardButton("üîÑ –í –ø—Ä–æ—Ü–µ—Å—Å–µ", callback_data='in_progress'),
                InlineKeyboardButton("‚ùå –ù–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ", callback_data='unanswered')
            ],
            [
                InlineKeyboardButton("üì¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–æ–π", callback_data='manage_broadcast')
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:",
            reply_markup=reply_markup
        )

    async def handle_broadcast(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–æ–π"""
        query = update.callback_query
        await query.answer()

        keyboard = [
            [
                InlineKeyboardButton("üìù –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data='create_broadcast'),
                InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='broadcast_stats')
            ],
            [
                InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='back_to_main')
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.message.edit_text(
            "üì¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–æ–π\n\n"
            "‚Ä¢ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É\n"
            "‚Ä¢ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞—Å—Å—ã–ª–æ–∫\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )

    async def send_broadcast(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º"""
        message = update.message.text
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
            subscribers = self.db_manager.get_active_subscribers()
            
            if not subscribers:
                await update.message.reply_text(
                    "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='back_to_broadcast')
                    ]])
                )
                return
            
            success = 0
            failed = 0
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –ø–æ–¥–ø–∏—Å—á–∏–∫—É
            for subscriber in subscribers:
                try:
                    await context.bot.send_message(
                        chat_id=subscriber.user_id,
                        text=message,
                        parse_mode='Markdown'
                    )
                    success += 1
                    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                    await asyncio.sleep(0.1)
                except Exception as e:
                    logger.error(f"Failed to send broadcast to {subscriber.user_id}: {e}")
                    failed += 1
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            status_text = (
                f"üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n\n"
                f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success}\n"
                f"‚ùå –û—à–∏–±–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏: {failed}\n"
                f"üìä –í—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {len(subscribers)}"
            )
            
            await update.message.reply_text(
                status_text,
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='back_to_broadcast')
                ]])
            )
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            logger.info(f"Broadcast completed. Success: {success}, Failed: {failed}")
            
        except Exception as e:
            logger.error(f"Error in broadcast: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='back_to_broadcast')
                ]])
            )
        finally:
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            context.user_data.pop('state', None)

    async def handle_callback_query(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
        query = update.callback_query
        
        if update.effective_user.id not in AUTHORIZED_OPERATORS:
            await query.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
            return
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
        if query.data == 'manage_broadcast':
            await self.handle_broadcast(update, context)
            return
            
        elif query.data == 'create_broadcast':
            await query.message.edit_text(
                "üìù –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.\n"
                "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è Markdown —Ä–∞–∑–º–µ—Ç–∫–∞.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("¬´ –û—Ç–º–µ–Ω–∞", callback_data='back_to_broadcast')
                ]])
            )
            context.user_data['state'] = 'waiting_broadcast_text'
            return
            
        elif query.data == 'broadcast_stats':
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            subscribers = self.db_manager.get_subscribers_count()
            active = self.db_manager.get_active_subscribers_count()
            
            await query.message.edit_text(
                f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Å—ã–ª–æ–∫\n\n"
                f"–í—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {subscribers}\n"
                f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {active}\n",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='back_to_broadcast')
                ]])
            )
            return
            
        elif query.data == 'back_to_broadcast':
            await self.handle_broadcast(update, context)
            return
            
        elif query.data == 'back_to_main':
            keyboard = [
                [
                    InlineKeyboardButton("üì® –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏", callback_data='new_requests'),
                    InlineKeyboardButton("‚úÖ –û—Ç–≤–µ—á–µ–Ω–Ω—ã–µ", callback_data='answered')
                ],
                [
                    InlineKeyboardButton("üîÑ –í –ø—Ä–æ—Ü–µ—Å—Å–µ", callback_data='in_progress'),
                    InlineKeyboardButton("‚ùå –ù–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ", callback_data='unanswered')
                ],
                [
                    InlineKeyboardButton("üì¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–æ–π", callback_data='manage_broadcast')
                ]
            ]
            await query.message.edit_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            return

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if update.effective_user.id not in AUTHORIZED_OPERATORS:
            return
            
        state = context.user_data.get('state')
        
        if state == 'waiting_broadcast_text':
            await self.send_broadcast(update, context)
            context.user_data.pop('state', None) 