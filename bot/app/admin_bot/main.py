# app/admin_bot/main.py
import os
import logging
import asyncio
import requests
from datetime import datetime
import nest_asyncio
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    CallbackQueryHandler,
    ConversationHandler,
    MessageHandler,
    filters
)
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup

from app.database.operations import DatabaseManager
from app.ai.chat import ChatManager
from app.config import AUTHORIZED_OPERATORS, ADMIN_BOT_TOKEN, DATABASE_URL, TELEGRAM_TOKEN

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
AWAITING_REPLY = 1
CONFIRM_REPLY = 2
AWAITING_BROADCAST = 3

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

nest_asyncio.apply()

SECRET_KEY = os.getenv("SECRET_KEY", "MYSECRET")
MAIN_BOT_URL = os.getenv("MAIN_BOT_URL", "http://silkway-bot:8000")

db_manager = DatabaseManager(DATABASE_URL)

class AdminHandlers:
    def __init__(self):
        self.db_manager = DatabaseManager(DATABASE_URL)
        self.chat_manager = ChatManager(self.db_manager)

    def get_admin_keyboard(self):
        """–û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–¥–º–∏–Ω–∞"""
        return ReplyKeyboardMarkup([
            ['üì• –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏'],
            ['‚úÖ –û—Ç–≤–µ—á–µ–Ω–Ω—ã–µ', 'üîÑ –í –ø—Ä–æ—Ü–µ—Å—Å–µ', '‚ùå –ù–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ'],
            ['üì¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–æ–π']
        ], resize_keyboard=True)

    async def start_cmd(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        if user_id not in AUTHORIZED_OPERATORS:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
            return
            
        await update.message.reply_text(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
            reply_markup=self.get_admin_keyboard()
        )

    async def show_requests(self, update: Update, context: ContextTypes.DEFAULT_TYPE, status='pending'):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º"""
        user_id = update.effective_user.id
        if user_id not in AUTHORIZED_OPERATORS:
            return

        if status == 'pending':
            sessions = self.db_manager.get_pending_sessions()
            status_text = "–Ω–æ–≤—ã—Ö"
        elif status == 'answered':
            sessions = self.db_manager.get_answered_sessions()
            status_text = "–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö"
        elif status == 'in_progress':
            sessions = self.db_manager.get_in_progress_sessions()
            status_text = "–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ"
        else:
            sessions = self.db_manager.get_unanswered_sessions()
            status_text = "–Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö"

        if not sessions:
            await update.message.reply_text(f"–ù–µ—Ç –∑–∞—è–≤–æ–∫ {status_text}.")
            return

        for session in sessions:
            try:
                user = await context.bot.get_chat(session.user_id)
                username = user.username or "–ë–µ–∑ username"
                
                msg = (
                    f"üìù –û–±—Ä–∞—â–µ–Ω–∏–µ ‚Ññ{session.id}\n"
                    f"–û—Ç: <a href='tg://user?id={session.user_id}'>{username}</a>\n"
                    f"ID: <code>{session.user_id}</code>\n"
                    f"‚è∞ –°–æ–∑–¥–∞–Ω–æ: {session.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
                    f"–°–æ–æ–±—â–µ–Ω–∏–µ:\n{getattr(session, 'last_message', '–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è')}\n"
                )

                keyboard = [
                    [InlineKeyboardButton("‚úçÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_{session.user_id}")],
                    [InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data=f"close_{session.user_id}")]
                ]

                await update.message.reply_text(
                    msg,
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode='HTML'
                )
            except Exception as e:
                logger.error(f"Error showing request for user {session.user_id}: {e}")
                continue

    async def handle_broadcast_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–æ–π"""
        keyboard = [
            [
                InlineKeyboardButton("üìù –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data='create_broadcast'),
                InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='broadcast_stats')
            ]
        ]
        await update.message.reply_text(
            "üì¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–æ–π\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def handle_broadcast_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
        query = update.callback_query
        await query.answer()

        if query.data == 'create_broadcast':
            await query.message.edit_text(
                "üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:\n"
                "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è Markdown —Ä–∞–∑–º–µ—Ç–∫–∞.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("¬´ –û—Ç–º–µ–Ω–∞", callback_data='cancel_broadcast')
                ]])
            )
            return AWAITING_BROADCAST
            
        elif query.data == 'broadcast_stats':
            subscribers = self.db_manager.get_subscribers_count()
            active = self.db_manager.get_active_subscribers_count()
            
            await query.message.edit_text(
                f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤\n\n"
                f"–í—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {subscribers}\n"
                f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {active}",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='back_to_broadcast')
                ]])
            )

    async def send_broadcast(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
        message = update.message.text
        subscribers = self.db_manager.get_active_subscribers()
        
        logger.info(f"Starting broadcast to {len(subscribers)} subscribers")
        
        success = 0
        failed = 0
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞
        main_bot = ApplicationBuilder().token(os.getenv("TELEGRAM_TOKEN")).build()
        
        for subscriber in subscribers:
            try:
                logger.info(f"Attempting to send broadcast to user {subscriber.user_id}")
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç
                await main_bot.bot.send_message(
                    chat_id=subscriber.user_id,
                    text=message,
                    parse_mode='Markdown'
                )
                logger.info(f"Successfully sent broadcast to user {subscriber.user_id}")
                success += 1
                await asyncio.sleep(0.1)
            except Exception as e:
                logger.error(f"Failed to send broadcast to {subscriber.user_id}: {e}")
                failed += 1
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞
        await main_bot.shutdown()
        
        status_text = (
            f"üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n\n"
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success}\n"
            f"‚ùå –û—à–∏–±–æ–∫: {failed}\n"
            f"üìä –í—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {len(subscribers)}"
        )
        
        logger.info(status_text)
        await update.message.reply_text(status_text)
        return ConversationHandler.END

    async def handle_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
        text = update.message.text
        
        if text == "üì• –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏":
            await self.show_requests(update, context, 'pending')
        elif text == "‚úÖ –û—Ç–≤–µ—á–µ–Ω–Ω—ã–µ":
            await self.show_requests(update, context, 'answered')
        elif text == "üîÑ –í –ø—Ä–æ—Ü–µ—Å—Å–µ":
            await self.show_requests(update, context, 'in_progress')
        elif text == "‚ùå –ù–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ":
            await self.show_requests(update, context, 'pending')
        elif text == "üì¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–æ–π":
            await self.handle_broadcast_command(update, context)

    async def check_new_requests(self, context: ContextTypes.DEFAULT_TYPE):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –∑–∞—è–≤–∫–∏
            pending_sessions = self.db_manager.get_pending_sessions()
            if pending_sessions:
                for admin_id in AUTHORIZED_OPERATORS:
                    try:
                        for session in pending_sessions:
                            user = await context.bot.get_chat(session.user_id)
                            username = user.username or "–ë–µ–∑ username"
                            
                            msg = (
                                f"üìù –ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ!\n"
                                f"–û—Ç: <a href='tg://user?id={session.user_id}'>{username}</a>\n"
                                f"ID: <code>{session.user_id}</code>\n"
                                f"–°–æ–æ–±—â–µ–Ω–∏–µ: {getattr(session, 'last_message', '–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è')}\n"
                            )
                            
                            keyboard = [[InlineKeyboardButton("‚úçÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_{session.user_id}")]]
                            
                            await context.bot.send_message(
                                chat_id=admin_id,
                                text=msg,
                                reply_markup=InlineKeyboardMarkup(keyboard),
                                parse_mode='HTML'
                            )
                    except Exception as e:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞—â–µ–Ω–∏—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å –Ω–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            in_progress_sessions = self.db_manager.get_in_progress_sessions()
            if in_progress_sessions:
                for admin_id in AUTHORIZED_OPERATORS:
                    try:
                        for session in in_progress_sessions:
                            if session.last_activity and (datetime.utcnow() - session.last_activity).seconds < 30:
                                user = await context.bot.get_chat(session.user_id)
                                username = user.username or "–ë–µ–∑ username"
                                
                                msg = (
                                    f"üîÑ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ–±—Ä–∞—â–µ–Ω–∏–∏ ¬´–í –ø—Ä–æ—Ü–µ—Å—Å–µ¬ª!\n"
                                    f"–û—Ç: <a href='tg://user?id={session.user_id}'>{username}</a>\n"
                                    f"ID: <code>{session.user_id}</code>\n"
                                    f"–°–æ–æ–±—â–µ–Ω–∏–µ: {getattr(session, 'last_message', '–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è')}\n"
                                )
                                
                                keyboard = [[InlineKeyboardButton("‚úçÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_{session.user_id}")]]
                                
                                await context.bot.send_message(
                                    chat_id=admin_id,
                                    text=msg,
                                    reply_markup=InlineKeyboardMarkup(keyboard),
                                    parse_mode='HTML'
                                )
                    except Exception as e:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")
        except Exception as e:
            logger.error(f"Error checking requests: {e}")

    async def handle_close_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–ó–∞–∫—Ä—ã—Ç—å'"""
        query = update.callback_query
        await query.answer()
        
        user_id = int(query.data.split('_')[1])
        
        try:
            self.db_manager.close_session(user_id)
            await query.message.edit_text(
                f"‚úÖ –û–±—Ä–∞—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∑–∞–∫—Ä—ã—Ç–æ",
                reply_markup=None
            )
        except Exception as e:
            logger.error(f"Error closing session: {e}")
            await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è")

    async def check_main_bot_availability(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞"""
        try:
            r = requests.get(f"{MAIN_BOT_URL}/health", timeout=5)
            return r.status_code == 200
        except:
            return False

    async def check_inactive_sessions(self, context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π"""
        try:
            inactive_sessions = self.db_manager.get_inactive_sessions()
            for session in inactive_sessions:
                try:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    await context.bot.send_message(
                        chat_id=session.user_id,
                        text=(
                            "üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ú—ã –∑–∞–º–µ—Ç–∏–ª–∏, —á—Ç–æ –≤ –≤–∞—à–µ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏ –Ω–µ –±—ã–ª–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ "
                            "–±–æ–ª–µ–µ 12 —á–∞—Å–æ–≤. –ï—Å–ª–∏ –≤–∞—à –≤–æ–ø—Ä–æ—Å —Ä–µ—à–µ–Ω, –æ–±—Ä–∞—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –∑–∞–∫—Ä—ã—Ç–æ. "
                            "–ï—Å–ª–∏ —É –≤–∞—Å –ø–æ—è–≤—è—Ç—Å—è –Ω–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ."
                        )
                    )
                    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é
                    self.db_manager.set_session_answered(session.user_id)
                except Exception as e:
                    logger.error(f"Error handling inactive session {session.user_id}: {e}")
        except Exception as e:
            logger.error(f"Error checking inactive sessions: {e}")

def main():
    app = ApplicationBuilder().token(ADMIN_BOT_TOKEN).build()
    handlers = AdminHandlers()

    # –°–æ–∑–¥–∞–µ–º ConversationHandler –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    broadcast_conv_handler = ConversationHandler(
        entry_points=[
            MessageHandler(filters.Regex('^üì¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–æ–π$'), handlers.handle_broadcast_command),
            CallbackQueryHandler(handlers.handle_broadcast_callback, pattern='^create_broadcast$')
        ],
        states={
            AWAITING_BROADCAST: [MessageHandler(filters.TEXT & ~filters.COMMAND, handlers.send_broadcast)]
        },
        fallbacks=[
            CallbackQueryHandler(handlers.handle_broadcast_command, pattern='^cancel_broadcast$'),
            CommandHandler('cancel', handlers.handle_broadcast_command)
        ]
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.add_handler(CommandHandler("start", handlers.start_cmd))
    app.add_handler(broadcast_conv_handler)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handlers.handle_text))
    
    if app.job_queue:
        app.job_queue.run_repeating(handlers.check_new_requests, interval=30)
        app.job_queue.run_repeating(handlers.check_inactive_sessions, interval=3600)
    else:
        logger.warning("JobQueue –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω. –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã.")
    
    app.run_polling()

if __name__ == "__main__":
    main()
